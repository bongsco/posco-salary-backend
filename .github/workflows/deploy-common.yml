name: Deploy to Amazon ECS (Reusable)

on:
  workflow_call:
    inputs:
      app_path:
        required: true
        type: string
      container_name:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string
      ecs_service:
        required: true
        type: string
      ecs_cluster:
        required: true
        type: string
      codebuild_project_name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      BONGSCO_DEV_APP_YML:
        required: true
      BONGSCO_TASK_JSON:
        required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run AWS CodeBuild For Code Test
        uses: aws-actions/aws-codebuild-run-build@v1
        with:
          project-name: ${{ inputs.codebuild_project_name }}
          buildspec-override: "buildspec.yml"
          environment-variables-override: |
            APP_MODULE=${{ inputs.app_path }}

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Copy Secret
        env:
          CREATE_SECRET: ${{ secrets.BONGSCO_DEV_APP_YML }}
          CREATE_SECRET_DIR: ${{ inputs.app_path }}/src/main/resources
          CREATE_SECRET_DIR_FILE_NAME: application-dev.yml
        run: echo $CREATE_SECRET | base64 --decode > $CREATE_SECRET_DIR/$CREATE_SECRET_DIR_FILE_NAME

      - name: Build with Gradle
        run: ./gradlew :${{ inputs.app_path }}:build

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG ${{ inputs.app_path }}
          docker push $ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Decode and save ECS task definition JSON
        env:
          ECS_TASK_DEFINITION: ${{ secrets.BONGSCO_TASK_JSON }}
        run: |
          echo "$ECS_TASK_DEFINITION" | base64 --decode > ecs-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: ${{ inputs.container_name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.ecs_service }}
          cluster: ${{ inputs.ecs_cluster }}
          wait-for-service-stability: true
