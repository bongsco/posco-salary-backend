name: Deploy to Amazon ECS CI/CD

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: bongsco/salary-management-backend
  ECS_SERVICE: bonsco-springboot-new-service
  ECS_CLUSTER: bongsco-salary-management-ecs-cluster
  CONTAINER_NAME: bongsco-springboot-container

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Monitor GitHub Commit Status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="bongsco/posco-salary-backend"
          SHA="${{ github.sha }}"
          API_URL="https://api.github.com/repos/$REPO/commits/$SHA/status"

          # Get the initial build status
          CURRENT_STATUS=$(curl -s --url "$API_URL" \
            --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" | jq -r '.state')

          echo "Current status is: $CURRENT_STATUS"

          # Start the timer
          START_TIME=$SECONDS
          MAX_WAIT_TIME=300  # 5 minutes in seconds

          # Poll until the status is no longer pending or timeout after 5 minutes
          while [ "${CURRENT_STATUS^^}" = "PENDING" ]; do
            # Check if 5 minutes have passed
            ELAPSED_TIME=$((SECONDS - START_TIME))
            if [ $ELAPSED_TIME -ge $MAX_WAIT_TIME ]; then
              echo "Timeout reached. The build is still pending after 5 minutes."
              exit 1
            fi

            sleep 20
            CURRENT_STATUS=$(curl -s --url "$API_URL" \
              --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" | jq -r '.state')
            echo "Polling... Current status is: $CURRENT_STATUS"
          done

          echo "Final status is: $CURRENT_STATUS"

          # Exit if the build failed
          if [ "${CURRENT_STATUS^^}" = "FAILURE" ]; then
            echo "Commit status failed. Canceling execution."
            exit 1
          fi
          echo "Final status is: $CURRENT_STATUS"

          # Exit if the build failed
          if [ "${CURRENT_STATUS^^}" = "FAILURE" ]; then
            echo "Commit status failed. Canceling execution."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Copy Secret
        env:
          CREATE_SECRET: ${{secrets.BONGSCO_DEV_APP_YML}}
          CREATE_SECRET_DIR: src/main/resources
          CREATE_SECRET_DIR_FILE_NAME: application-dev.yml
        run: echo $CREATE_SECRET | base64 --decode > $CREATE_SECRET_DIR/$CREATE_SECRET_DIR_FILE_NAME

      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Decode and save ECS task definition JSON
        env:
          ECS_TASK_DEFINITION: ${{ secrets.BONGSCO_TASK_JSON }}
        run: |
          echo "$ECS_TASK_DEFINITION" | base64 --decode > ecs-task-definition.json
          cat ecs-task-definition.json 


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true